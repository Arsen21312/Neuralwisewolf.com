// CONFIG - –ê–ë–°–û–õ–Æ–¢–ù–´–ï –ü–£–¢–ò!
const CONFIG = {
    fragmentsPath: '/fragments/',
    toolsDataPath: '/data/tools.json'
};

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
async function loadFragment(selector, fileName) {
    const element = document.querySelector(`[data-include="${selector}"]`);
    if (!element) {
        console.warn(`–≠–ª–µ–º–µ–Ω—Ç [data-include="${selector}"] –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
    }

    try {
        const response = await fetch(`${CONFIG.fragmentsPath}${fileName}`);
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
        element.innerHTML = await response.text();
        console.log(`‚úÖ –§—Ä–∞–≥–º–µ–Ω—Ç "${selector}" –∑–∞–≥—Ä—É–∂–µ–Ω`);
        
        // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ –ª–æ–≥–∏–∫—É
        if (selector === 'sidebar') {
            initSidebarLogic();
        } else if (selector === 'related') {
            initRelatedTools();
        }
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ "${selector}":`, error);
        element.innerHTML = `<!-- –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${selector} -->`;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
async function loadToolsData() {
    try {
        const response = await fetch(CONFIG.toolsDataPath);
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ tools.json:', error);
        return { tools: [], categories: {} };
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ —Å–∞–π–¥–±–∞—Ä–∞
async function initSidebarLogic() {
    const sideGrid = document.getElementById('sideGrid');
    if (!sideGrid) return;
    
    try {
        const data = await loadToolsData();
        const tools = data.tools || [];
        populateSidebar(tools);
        setupSidebarSearch(tools);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∞–π–¥–±–∞—Ä–∞:', error);
        sideGrid.innerHTML = '<div class="muted">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</div>';
    }
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∞–π–¥–±–∞—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
function populateSidebar(tools) {
    const sideGrid = document.getElementById('sideGrid');
    if (!sideGrid) return;
    
    const categories = {
        'math': { name: 'üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —á–∏—Å–ª–∞', tools: [] },
        'convert': { name: 'üìè –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã –∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è', tools: [] },
        'text': { name: '‚úçÔ∏è –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', tools: [] },
        'dev': { name: 'üë©‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É', tools: [] },
        'random': { name: 'üé≤ –†–∞–Ω–¥–æ–º –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã', tools: [] },
        'life': { name: 'üìä –ë—ã—Ç –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', tools: [] },
        'fun': { name: 'üß© –†–∞–∑–Ω–æ–µ –∏ fun', tools: [] }
    };
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    tools.forEach(tool => {
        if (categories[tool.category]) {
            categories[tool.category].tools.push(tool);
        }
    });
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
    sideGrid.innerHTML = Object.entries(categories)
        .map(([categoryId, category]) => {
            if (category.tools.length === 0) return '';
            
            const toolsList = category.tools
                .slice(0, 6)
                .map(tool => `
                    <a href="/tools/${tool.slug}.html" class="sidebar-tool">
                        <span class="tool-icon">${tool.icon}</span>
                        <span class="tool-title">${tool.title}</span>
                        ${tool.popular ? '<span class="tool-badge popular">üî•</span>' : ''}
                        ${tool.new ? '<span class="tool-badge new">üÜï</span>' : ''}
                    </a>
                `).join('');
            
            return `
                <div class="side-cat">
                    <h4>${category.name}</h4>
                    ${toolsList}
                    ${category.tools.length > 6 ? 
                        `<a href="/index.html?category=${categoryId}" class="see-all">
                            –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ‚Üí
                        </a>` : ''}
                </div>
            `;
        })
        .join('');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ
function setupSidebarSearch(tools) {
    const searchInput = document.getElementById('sideSearch');
    const categorySelect = document.getElementById('sideCat');
    
    if (!searchInput || !categorySelect) return;
    
    const filterTools = () => {
        const searchTerm = searchInput.value.toLowerCase();
        const category = categorySelect.value;
        
        document.querySelectorAll('.side-cat').forEach(cat => {
            let visibleTools = 0;
            
            cat.querySelectorAll('.sidebar-tool').forEach(tool => {
                const title = tool.querySelector('.tool-title').textContent.toLowerCase();
                const shouldShow = 
                    (category === '' || tool.closest('.side-cat').dataset.category === category) &&
                    (searchTerm === '' || title.includes(searchTerm));
                
                tool.style.display = shouldShow ? 'flex' : 'none';
                if (shouldShow) visibleTools++;
            });
            
            cat.style.display = visibleTools > 0 ? 'block' : 'none';
        });
    };
    
    searchInput.addEventListener('input', filterTools);
    categorySelect.addEventListener('change', filterTools);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ö–æ–∂–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
async function initRelatedTools() {
    const relatedGrid = document.getElementById('related-tools-grid');
    if (!relatedGrid) return;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ slug
    const mainElement = document.querySelector('main[data-category][data-slug]');
    if (!mainElement) return;
    
    const currentCategory = mainElement.dataset.category;
    const currentSlug = mainElement.dataset.slug;
    
    try {
        const data = await loadToolsData();
        const tools = data.tools || [];
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
        const relatedTools = tools
            .filter(tool => tool.category === currentCategory && tool.slug !== currentSlug)
            .slice(0, 4);
        
        displayRelatedTools(relatedTools);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ö–æ–∂–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:', error);
        showRelatedError();
    }
    
    function displayRelatedTools(tools) {
        if (tools.length === 0) {
            showRelatedEmpty();
            return;
        }
        
        relatedGrid.innerHTML = tools.map(tool => `
            <a href="/tools/${tool.slug}.html" class="related-card">
                ${tool.popular ? '<span class="related-badge badge-popular">–ü–æ–ø—É–ª—è—Ä–Ω—ã–π</span>' : ''}
                ${tool.new ? '<span class="related-badge badge-new">–ù–æ–≤—ã–π</span>' : ''}
                
                <div class="related-icon">${tool.icon || 'üê∫'}</div>
                
                <div class="related-content">
                    <div class="related-title">${tool.title}</div>
                    <p class="related-desc">${tool.description || ''}</p>
                </div>
            </a>
        `).join('');
    }
    
    function showRelatedEmpty() {
        relatedGrid.innerHTML = `
            <div class="related-loading">
                <span>–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Ö–æ–∂–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤</span>
                <a href="/" class="btn btn-primary">–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</a>
            </div>
        `;
    }
    
    function showRelatedError() {
        relatedGrid.innerHTML = `
            <div class="related-loading">
                <span>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</span>
                <a href="/" class="btn btn-secondary">–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
            </div>
        `;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é (–æ—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ)
function initSidebar() {
    const openBtn = document.getElementById('openMenu');
    const closeBtn = document.getElementById('closeMenu');
    const sidebar = document.getElementById('sidebar');
    const overlay = document.getElementById('overlay');
    
    if (!openBtn || !sidebar) return;
    
    const toggleMenu = (isOpen) => {
        sidebar.classList.toggle('open', isOpen);
        if (overlay) overlay.classList.toggle('show', isOpen);
        document.body.style.overflow = isOpen ? 'hidden' : '';
        sidebar.setAttribute('aria-hidden', !isOpen);
    };
    
    openBtn.addEventListener('click', () => toggleMenu(true));
    if (closeBtn) closeBtn.addEventListener('click', () => toggleMenu(false));
    
    if (overlay) {
        overlay.addEventListener('click', () => toggleMenu(false));
    }
    
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') toggleMenu(false);
    });
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
function syncSearch() {
    const mainSearch = document.getElementById('q');
    const sideSearch = document.getElementById('sideSearch');
    const mainCategory = document.getElementById('cat');
    const sideCategory = document.getElementById('sideCat');

    if (mainSearch && sideSearch) {
        mainSearch.addEventListener('input', (e) => {
            sideSearch.value = e.target.value;
            sideSearch.dispatchEvent(new Event('input', { bubbles: true }));
        });
    }

    if (mainCategory && sideCategory) {
        mainCategory.addEventListener('change', (e) => {
            sideCategory.value = e.target.value;
            sideCategory.dispatchEvent(new Event('change', { bubbles: true }));
        });
    }
    
    if (sideSearch && mainSearch) {
        sideSearch.addEventListener('input', (e) => {
            mainSearch.value = e.target.value;
            mainSearch.dispatchEvent(new Event('input', { bubbles: true }));
        });
    }

    if (sideCategory && mainCategory) {
        sideCategory.addEventListener('change', (e) => {
            mainCategory.value = e.target.value;
            mainCategory.dispatchEvent(new Event('change', { bubbles: true }));
        });
    }
}

// –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function initApp() {
    console.log('üê∫ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Neural Wise Wolf...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —á–∞—Å—Ç–∏ —Å–∞–π—Ç–∞
    await Promise.allSettled([
        loadFragment('header', 'header.html'),
        loadFragment('sidebar', 'sidebar.html'),
        loadFragment('footer', 'footer.html'),
        loadFragment('related', 'related.html')
    ]);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    initSidebar();
    syncSearch();
    
    // –ï—Å–ª–∏ –º—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
    if (document.getElementById('toolsGrid')) {
        const data = await loadToolsData();
        if (data.tools) {
            setupSearch(data.tools);
        }
    }
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initApp);
} else {
    initApp();
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
function setupSearch(tools) {
    const searchInput = document.getElementById('mainSearch');
    const toolsGrid = document.getElementById('toolsGrid');
    
    if (!searchInput || !toolsGrid) return;

    function filterTools(searchTerm = '') {
        const term = searchTerm.toLowerCase().trim();
        const filtered = tools.filter(tool => {
            const searchString = `${tool.title} ${tool.description} ${tool.keywords}`.toLowerCase();
            return searchString.includes(term);
        });

        displayTools(filtered);
    }

    function displayTools(toolsToShow) {
        if (toolsToShow.length === 0) {
            toolsGrid.innerHTML = `
                <div class="card" style="grid-column: 1 / -1; text-align: center;">
                    <h3>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</p>
                </div>
            `;
            return;
        }

        toolsGrid.innerHTML = toolsToShow.map(tool => `
            <a href="/tools/${tool.slug}.html" class="card tool-card">
                ${tool.popular ? '<span class="card-badge popular">–ü–æ–ø—É–ª—è—Ä–Ω—ã–π</span>' : ''}
                ${tool.new ? '<span class="card-badge new">–ù–æ–≤—ã–π</span>' : ''}
                <div class="card-icon">${tool.icon}</div>
                <h3>${tool.title}</h3>
                <p>${tool.description}</p>
            </a>
        `).join('');
    }

    searchInput.addEventListener('input', (e) => {
        filterTools(e.target.value);
    });

    filterTools();

    window.initRelated = async function initRelated(containerEl, category, jsonUrl){
  try {
    const url = jsonUrl || (location.pathname.startsWith('/tools/'))
      ? '../data/tools.json' : '/data/tools.json';
    const res = await fetch(url, {cache:'no-store'});
    if (!res.ok) throw new Error(res.status);
    const data = await res.json();
    const tools = (data.tools||[]).filter(t=>t.category===category).slice(0,4);

    containerEl.querySelector('#related-tools-grid').innerHTML = tools.map(t => `
      <a href="/tools/${t.slug}.html" class="related-card">
        <div class="related-card-top">
          ${t.popular?'<span class="tool-badge popular">üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–π</span>':''}
          ${t.new?'<span class="tool-badge new">üÜï –ù–æ–≤—ã–π</span>':''}
        </div>
        <h4 class="tool-title">${t.title}</h4>
        <p class="tool-desc">${t.description}</p>
      </a>
    `).join('');
  } catch(e){
    console.error('related error:', e);
    containerEl.querySelector('#related-tools-grid').innerHTML =
      '<div class="muted">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</div>';
  }
}

function toTarget({sign,intVal,frac}, base, precision, trimZeros, grouping){
  const digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';

  // --- integer ---
  let n = intVal < 0n ? -intVal : intVal;
  let intStr = (n===0n) ? '0' : '';
  while(n>0n){ const r = n % BigInt(base); intStr = digits[Number(r)] + intStr; n /= BigInt(base); }
  if(sign<0 && !(intStr==='0' && frac===0)) intStr = '-' + intStr;

  // --- fraction ---
  let fr = frac, fracStr = '';
  for(let i=0;i<precision;i++){
    fr *= base;
    const d = Math.floor(fr + 1e-14);
    fracStr += digits[d]; fr -= d;
    if(fr<=1e-15) break;
  }
  if(trimZeros) fracStr = fracStr.replace(/0+$/,'');

  // --- grouping: —Ç–æ–ª—å–∫–æ –¥–ª—è base 10 ---
  if(grouping && base===10){
    const neg = intStr.startsWith('-'); const core = neg ? intStr.slice(1) : intStr;
    const grouped = core.replace(/\B(?=(\d{3})+(?!\d))/g,' ');
    intStr = neg ? '-' + grouped : grouped;
  }

  return fracStr ? intStr + '.' + fracStr : intStr;
}

}
